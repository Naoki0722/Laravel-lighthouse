"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    userById(id: ID @eq): User @find
    posts: [Post!]! @all
    post(id: Int! @eq): Post @find
    comment(id: Int! @eq): Comment @find
    comments: [Comment!]! @all
    greet(name: String!): String
    user: [User!]! @all

    # モデルに書くパターン
    welcomeMessage: String! @method(name: getWelcomeMessage)

    # リゾルバに書くパターン(二種類の記法あり)
    UserResolver(id: ID!): String!
    test(id: ID): User @field(resolver: "UserResolver@findByIdUser")
}

type Mutation {
    testCreateUser(inputData: createUserInput! @spread): User @create
    CreateUser(inputData: createUserInput! @spread): User!
    updateUser(id: ID!, name: String!, email: String!): User @update
    destroyUser(id: ID!): User @delete
    destroyUsers(id: [ID!]!): [User] @delete
    userLogin(email: String!, password: String!): User!
    # userLogout(): User!
}


type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
}

type Post {
    id: ID!
    title: String!
    content: String!
    created_at: DateTime!
    updated_at: DateTime!
    author: User! @belongsTo
    comments: [Comment!]! @hasMany
}


type Comment {
    id: ID!
    reply: String!
    created_at: DateTime!
    updated_at: DateTime!
    post: Post! @belongsTo

}

input createUserInput {
    name: String!
    email: String!
    password: String!
}
